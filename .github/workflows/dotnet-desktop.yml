name: .NET Core Desktop

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Release]

    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Install .NET SDKs
      - name: Install .NET SDKs
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x
            3.1.x
            5.0.x

      # Install .NET Framework Developer Pack 4.5
      - name: Install .NET Framework 4.5 Developer Pack
        run: choco install netfx-4.5.2-devpack -y

      # Add MSBuild to the PATH
      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v2

      # Install NuGet CLI
      - name: Install NuGet CLI
        run: choco install nuget.commandline -y

      # Restore, build, and execute all unit tests in the solution folders
      - name: Restore, Build, and Execute unit tests
        run: |
          $testProjects = Get-ChildItem -Path . -Recurse -Include *.csproj | Where-Object { $_.FullName -like "*Solution*UnitTests*.csproj" }
          foreach ($testProject in $testProjects) {
            Write-Host "Restoring, building, and running tests for project: $testProject"
            if ((Select-String -Path $testProject.FullName -Pattern '<TargetFramework>.*net[0-9]+.*</TargetFramework>').Count -gt 0) {
              dotnet restore $testProject.FullName
              dotnet build $testProject.FullName --configuration ${{ matrix.configuration }}
              dotnet test $testProject.FullName --configuration ${{ matrix.configuration }}
            } else {
              nuget restore $testProject.FullName -SolutionDirectory $(Split-Path $testProject.FullName -Parent)
              msbuild $testProject.FullName /p:Configuration=${{ matrix.configuration }} /p:SolutionDir=$(Split-Path $testProject.FullName -Parent)
              # Assuming the tests are using MSTest, adjust if using NUnit or xUnit
              $testDlls = Get-ChildItem -Path (Split-Path $testProject.FullName -Parent) -Recurse -Filter *.Tests.dll
              foreach ($testDll in $testDlls) {
                & "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\MSTest.exe" /testcontainer:$testDll.FullName
              }
            }
          }

      - name: Restore the application
        run: msbuild ${{ env.Solution_Name }} /t:Restore /p:Configuration=${{ matrix.configuration }}
        env:
          Configuration: ${{ matrix.configuration }}
